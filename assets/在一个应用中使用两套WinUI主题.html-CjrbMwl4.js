import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as e,o as n}from"./app-3OtlcwoS.js";const l="/assets/01-CfbdyycD.png",t="/assets/02-CvoYWF_7.png",p="/assets/03-DJR-zt0A.png",h={};function r(d,s){return n(),a("div",null,s[0]||(s[0]=[e('<h1 id="uwp开发-在一个应用中使用两套winui主题" tabindex="-1"><a class="header-anchor" href="#uwp开发-在一个应用中使用两套winui主题"><span>UWP开发：在一个应用中使用两套WinUI主题</span></a></h1><h2 id="在xaml中更改" tabindex="-1"><a class="header-anchor" href="#在xaml中更改"><span>在XAML中更改</span></a></h2><blockquote><p>在 <a href="https://learn.microsoft.com/zh-cn/windows/apps/design/style/xaml-styles#winui-and-styles" target="_blank" rel="noopener noreferrer">https://learn.microsoft.com/zh-cn/windows/apps/design/style/xaml-styles#winui-and-styles</a> 中介绍了在XAML中切换旧版本的方式。</p></blockquote><p>在<code>App.xaml</code>中的<code>XamlControlsResources</code>内添加一个属性：</p><p><code>ControlsResourcesVersion=&quot;Version1&quot;</code></p><p>启动应用，就可以看到旧版的控件样式了。</p><h2 id="在代码中更改" tabindex="-1"><a class="header-anchor" href="#在代码中更改"><span>在代码中更改</span></a></h2><p>在应用运行的时候，如果我们用XAML热重载强行更改<code>App.xaml</code>中的样式版本，应用就会因资源冲突闪退</p><p>如果在App.xaml.cs中直接给App.Resources添加<code>XamlControlsResources</code>，你会喜提一个报错：<br><img src="'+l+`" alt="" loading="lazy"></p><p>因此，在应用运行或启动时直接更改资源版本是行不通的，我们需要在XAML资源加载之前更改样式的版本</p><h3 id="_1-创建主题文件" tabindex="-1"><a class="header-anchor" href="#_1-创建主题文件"><span>1.创建主题文件</span></a></h3><p>创建一个资源字典<code>Theme.xaml</code>(也可为其他命名)</p><p>同时创建后台代码<code>Theme.xaml.cs</code>，此时VS会自动合并两个文件</p><p>在Theme.xaml中添加x:Class属性以使用后台代码</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-xml"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">x:Class=&quot;WinUIThemeTest.Theme&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>同时在<code>Theme.xaml.cs</code>中作出如下更改</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-csharp"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">namespace</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> WinUIThemeTest</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    internal</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> partial</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Theme</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ResourceDictionary</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Theme</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">InitializeComponent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-编写后台代码" tabindex="-1"><a class="header-anchor" href="#_2-编写后台代码"><span>2.编写后台代码</span></a></h3><p>这时候，我们就可以在Theme的构造函数中对这个资源字典进行合并操作了:</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-csharp"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Theme</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">      this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">InitializeComponent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">      this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">MergedDictionaries</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(new </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">XamlControlsResources</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">ControlsResourcesVersion</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> ControlsResourcesVersion</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Version1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> });</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-添加到app-xaml" tabindex="-1"><a class="header-anchor" href="#_3-添加到app-xaml"><span>3.添加到App.xaml</span></a></h3><p>在App.xaml中添加此资源字典:</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-xml"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Application.Resources</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ResourceDictionary</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ResourceDictionary.MergedDictionaries</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">local:Theme</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ResourceDictionary.MergedDictionaries</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ResourceDictionary</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Application.Resources</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时，我们启动后同样可以看到旧版控件样式。</p><h3 id="_4-更改逻辑" tabindex="-1"><a class="header-anchor" href="#_4-更改逻辑"><span>4.更改逻辑</span></a></h3><p>后台代码控制<code>XamlControlsResources</code>版本的好处就是可以根据需求任意更改版本，比如:</p><p>(Theme.xaml.cs)</p><div class="language-csh line-numbers-mode" data-highlighter="shiki" data-ext="csh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-csh"><span class="line"><span>public Theme()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    this.InitializeComponent();</span></span>
<span class="line"><span>    if (Environment.OSVersion.Version.Build &gt;= 22000)//判断系统是否为Win11</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>        this.MergedDictionaries.Add(new XamlControlsResources { ControlsResourcesVersion = ControlsResourcesVersion.Version2 });//添加新版本控件样式</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    else</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>        this.MergedDictionaries.Add(new XamlControlsResources { ControlsResourcesVersion = ControlsResourcesVersion.Version1 });//添加旧版本控件样式</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，就可以根据系统版本使用不同控件样式了。<br> （当然，也可以自己写一些其他的逻辑，如在设置中切换样式等等）</p><h2 id="最终效果" tabindex="-1"><a class="header-anchor" href="#最终效果"><span>最终效果</span></a></h2><h3 id="旧版样式" tabindex="-1"><a class="header-anchor" href="#旧版样式"><span>旧版样式</span></a></h3><figure><img src="`+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="新版样式" tabindex="-1"><a class="header-anchor" href="#新版样式"><span>新版样式</span></a></h3><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="源码" tabindex="-1"><a class="header-anchor" href="#源码"><span>源码</span></a></h2><p><a href="https://github.com/zxbmmmmmmmmm/WinUIThemeSample" target="_blank" rel="noopener noreferrer">https://github.com/zxbmmmmmmmmm/WinUIThemeSample</a></p><h2 id="思路参考" tabindex="-1"><a class="header-anchor" href="#思路参考"><span>思路参考</span></a></h2><p><a href="https://github.com/character-map-uwp/Character-Map-UWP" target="_blank" rel="noopener noreferrer">https://github.com/character-map-uwp/Character-Map-UWP</a></p>',38)]))}const k=i(h,[["render",r]]),m=JSON.parse('{"path":"/posts/%E5%9C%A8%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8%E4%B8%AD%E4%BD%BF%E7%94%A8%E4%B8%A4%E5%A5%97WinUI%E4%B8%BB%E9%A2%98.html","title":"UWP开发:在一个应用中使用两套WinUI主题","lang":"zh-CN","frontmatter":{"date":"2023-06-23T00:00:00.000Z","title":"UWP开发:在一个应用中使用两套WinUI主题","excerpt":"2021年6月，微软发布了WinUI 2.6更新，其中包含了符合Win11设计的全新控件样式。但为避免部分应用不兼容新样式，旧版的控件样式仍然被保留了下来。本文将介绍使用旧版样式的两种方法。","category":["C#"],"tag":["UWP","WinUI","XAML"],"description":"UWP开发：在一个应用中使用两套WinUI主题 在XAML中更改 在 https://learn.microsoft.com/zh-cn/windows/apps/design/style/xaml-styles#winui-and-styles 中介绍了在XAML中切换旧版本的方式。 在App.xaml中的XamlControlsResources内...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"UWP开发:在一个应用中使用两套WinUI主题\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-23T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-19T12:24:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Betta_Fish\\",\\"url\\":\\"https://github.com/zxbmmmmmmmmm\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/%E5%9C%A8%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8%E4%B8%AD%E4%BD%BF%E7%94%A8%E4%B8%A4%E5%A5%97WinUI%E4%B8%BB%E9%A2%98.html"}],["meta",{"property":"og:site_name","content":"Betta_Fish"}],["meta",{"property":"og:title","content":"UWP开发:在一个应用中使用两套WinUI主题"}],["meta",{"property":"og:description","content":"UWP开发：在一个应用中使用两套WinUI主题 在XAML中更改 在 https://learn.microsoft.com/zh-cn/windows/apps/design/style/xaml-styles#winui-and-styles 中介绍了在XAML中切换旧版本的方式。 在App.xaml中的XamlControlsResources内..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-19T12:24:23.000Z"}],["meta",{"property":"article:tag","content":"XAML"}],["meta",{"property":"article:tag","content":"WinUI"}],["meta",{"property":"article:tag","content":"UWP"}],["meta",{"property":"article:published_time","content":"2023-06-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-19T12:24:23.000Z"}]]},"git":{"createdTime":1750335863000,"updatedTime":1750335863000,"contributors":[{"name":"Betta_Fish","username":"","email":"zxbmmmmmmmmm@qq.com","commits":1}]},"readingTime":{"minutes":2.2,"words":659},"filePathRelative":"posts/在一个应用中使用两套WinUI主题.md","autoDesc":true}');export{k as comp,m as data};
